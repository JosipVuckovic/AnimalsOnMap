
@using Microsoft.CodeAnalysis.CSharp.Syntax
@model List<AnimalsOnMap.Data.Classes.Animal>
@{
    ViewData["Title"] = "Home Page";
}
<div id="leafLetMap"></div>

<script>
    var firstAnimalMarkers = [];
    var map = L.map('leafLetMap').setView([45.815399, 15.966568], 10);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
    var _firstAnimalLayer = null;
    function setFirstAnimalLayer(value) {
        _firstAnimalLayer = L.layerGroup(value).addTo(map);
    }
    function clearFirstAnimal() {
        _firstAnimalLayer.clearLayers();
    }
    function setVisibility(finalMarkers, isVisible) {
        for (var i = 0; i < finalMarkers.length; i++) {
            finalMarkers[i].visible = isVisible;
        }
    }
    function setFirstAnimalLayerByVisibility() {
        console.log("plakanje");
        console.log(firstAnimalMarkers);
        if (_firstAnimalLayer != null && firstAnimalMarkers.length>0) {
            _firstAnimalLayer.clearLayers();    
        }
        var filteredList = firstAnimalMarkers.filter((x) => {
            return x.visible == true
        });
        console.log(filteredList);
        var forLayer = filteredList.map((x) => x.marker);
        _firstAnimalLayer = L.layerGroup(forLayer).addTo(map);
    }
    
</script>

<div class="leafLetMapMenu">
    <h6>Found Animals</h6>
    @if (Model == null || Model.Count == 0)
    {
        <span> No animals to show :( Go find some...</span>
    }
    else
    {
        @foreach (var item in Model.GroupBy(x => x.AnimalSpecies).Select(y => y.Key))
        {
            <div style="text-align: left">
                <input type="checkbox" id="@item" name="@item" />
                <label for="@item"> @item</label><br>
            </div>

            foreach (var animal in @Model.Where(x=> x.AnimalSpecies == item))
	        {
<script>
    var tmpMarker = L.marker([@animal.Latituda ,@animal.Longitude])
        .bindPopup("@animal.AnimalSpecies <br> @animal.LocalName <br> @animal.LatinName" , { closeOnClick: false, autoClose: false, maxWidth: "auto" });
        firstAnimalMarkers.push(
            {
                type: "@item",
                marker: tmpMarker,
                visible: false
            });

    $('#@item').change(function () {
        var currentType = $(this).attr("id");
        if (this.checked) {
            var filteredList = firstAnimalMarkers.filter((x) => {
                return x.type == currentType
            });
            setVisibility(filteredList, true);
            setFirstAnimalLayerByVisibility();
            console.log("jesam");
        } else {
            var filteredList = firstAnimalMarkers.filter((x) => {
                return x.type == currentType
            });
            setVisibility(filteredList, false);
            setFirstAnimalLayerByVisibility();
        }
    });
</script> 
	        }
        }
    }

</div>



